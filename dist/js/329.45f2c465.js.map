{"version":3,"file":"js/329.45f2c465.js","mappings":"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,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,MACJC,GAAI,OAGJ1V,EAAOC,QAAUG,C","sources":["webpack://panel/./node_modules/currency-formatter/index.js","webpack://panel/./node_modules/object-assign/index.js","webpack://panel/./node_modules/accounting/accounting.js","webpack://panel/./node_modules/locale-currency/index.js","webpack://panel/./node_modules/locale-currency/map.js"],"sourcesContent":["var accounting = require('accounting')\nvar assign = require('object-assign')\nvar localeCurrency = require('locale-currency')\nvar currencies = require('./currencies.json')\nvar localeFormats = require('./localeFormats.json')\n\nvar defaultCurrency = {\n  symbol: '',\n  thousandsSeparator: ',',\n  decimalSeparator: '.',\n  symbolOnLeft: true,\n  spaceBetweenAmountAndSymbol: false,\n  decimalDigits: 2\n}\n\nvar defaultLocaleFormat = {}\n\nvar formatMapping = [\n  {\n    symbolOnLeft: true,\n    spaceBetweenAmountAndSymbol: false,\n    format: {\n      pos: '%s%v',\n      neg: '-%s%v',\n      zero: '%s%v'\n    }\n  },\n  {\n    symbolOnLeft: true,\n    spaceBetweenAmountAndSymbol: true,\n    format: {\n      pos: '%s %v',\n      neg: '-%s %v',\n      zero: '%s %v'\n    }\n  },\n  {\n    symbolOnLeft: false,\n    spaceBetweenAmountAndSymbol: false,\n    format: {\n      pos: '%v%s',\n      neg: '-%v%s',\n      zero: '%v%s'\n    }\n  },\n  {\n    symbolOnLeft: false,\n    spaceBetweenAmountAndSymbol: true,\n    format: {\n      pos: '%v %s',\n      neg: '-%v %s',\n      zero: '%v %s'\n    }\n  }\n]\n\nfunction format(value, options) {\n  var code = options.code || (options.locale && localeCurrency.getCurrency(options.locale))\n  var localeMatch = /^([a-z]+)([_-]([a-z]+))?$/i.exec(options.locale) || []\n  var language = localeMatch[1]\n  var region = localeMatch[3]\n  var localeFormat = assign({}, defaultLocaleFormat,\n                            localeFormats[language] || {},\n                            localeFormats[language + '-' + region] || {})\n  var currency = assign({}, defaultCurrency, findCurrency(code), localeFormat)\n  \n  var symbolOnLeft = currency.symbolOnLeft\n  var spaceBetweenAmountAndSymbol = currency.spaceBetweenAmountAndSymbol\n\n  var format = formatMapping.filter(function(f) {\n    return f.symbolOnLeft == symbolOnLeft && f.spaceBetweenAmountAndSymbol == spaceBetweenAmountAndSymbol\n  })[0].format\n\n  return accounting.formatMoney(value, {\n    symbol: isUndefined(options.symbol)\n              ? currency.symbol\n              : options.symbol,\n\n    decimal: isUndefined(options.decimal)\n              ? currency.decimalSeparator\n              : options.decimal,\n\n    thousand: isUndefined(options.thousand)\n              ? currency.thousandsSeparator\n              : options.thousand,\n\n    precision: typeof options.precision === 'number'\n              ? options.precision\n              : currency.decimalDigits,\n\n    format: ['string', 'object'].indexOf(typeof options.format) > -1\n              ? options.format\n              : format\n  })\n}\n\nfunction findCurrency (currencyCode) {\n  return currencies[currencyCode]\n}\n\nfunction isUndefined (val) {\n  return typeof val === 'undefined'\n}\n\nfunction unformat(value, options) {\n  var code = options.code || (options.locale && localeCurrency.getCurrency(options.locale))\n  var localeFormat = localeFormats[options.locale] || defaultLocaleFormat\n  var currency = assign({}, defaultCurrency, findCurrency(code), localeFormat)\n  var decimal = isUndefined(options.decimal) ? currency.decimalSeparator : options.decimal\n  return accounting.unformat(value, decimal)\n}\n\nmodule.exports = {\n  defaultCurrency: defaultCurrency,\n  get currencies() {\n    // In favor of backwards compatibility, the currencies map is converted to an array here\n    return Object.keys(currencies).map(function(key) {\n      return currencies[key]\n    })\n  },\n  findCurrency: findCurrency,\n  format: format,\n  unformat: unformat\n}","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/*!\n * accounting.js v0.4.1\n * Copyright 2014 Open Exchange Rates\n *\n * Freely distributable under the MIT license.\n * Portions of accounting.js are inspired or borrowed from underscore.js\n *\n * Full details and documentation:\n * http://openexchangerates.github.io/accounting.js/\n */\n\n(function(root, undefined) {\n\n\t/* --- Setup --- */\n\n\t// Create the local library object, to be exported or referenced globally later\n\tvar lib = {};\n\n\t// Current version\n\tlib.version = '0.4.1';\n\n\n\t/* --- Exposed settings --- */\n\n\t// The library's settings configuration object. Contains default parameters for\n\t// currency and number formatting\n\tlib.settings = {\n\t\tcurrency: {\n\t\t\tsymbol : \"$\",\t\t// default currency symbol is '$'\n\t\t\tformat : \"%s%v\",\t// controls output: %s = symbol, %v = value (can be object, see docs)\n\t\t\tdecimal : \".\",\t\t// decimal point separator\n\t\t\tthousand : \",\",\t\t// thousands separator\n\t\t\tprecision : 2,\t\t// decimal places\n\t\t\tgrouping : 3\t\t// digit grouping (not implemented yet)\n\t\t},\n\t\tnumber: {\n\t\t\tprecision : 0,\t\t// default precision on numbers is 0\n\t\t\tgrouping : 3,\t\t// digit grouping (not implemented yet)\n\t\t\tthousand : \",\",\n\t\t\tdecimal : \".\"\n\t\t}\n\t};\n\n\n\t/* --- Internal Helper Methods --- */\n\n\t// Store reference to possibly-available ECMAScript 5 methods for later\n\tvar nativeMap = Array.prototype.map,\n\t\tnativeIsArray = Array.isArray,\n\t\ttoString = Object.prototype.toString;\n\n\t/**\n\t * Tests whether supplied parameter is a string\n\t * from underscore.js\n\t */\n\tfunction isString(obj) {\n\t\treturn !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n\t}\n\n\t/**\n\t * Tests whether supplied parameter is a string\n\t * from underscore.js, delegates to ECMA5's native Array.isArray\n\t */\n\tfunction isArray(obj) {\n\t\treturn nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === '[object Array]';\n\t}\n\n\t/**\n\t * Tests whether supplied parameter is a true object\n\t */\n\tfunction isObject(obj) {\n\t\treturn obj && toString.call(obj) === '[object Object]';\n\t}\n\n\t/**\n\t * Extends an object with a defaults object, similar to underscore's _.defaults\n\t *\n\t * Used for abstracting parameter handling from API methods\n\t */\n\tfunction defaults(object, defs) {\n\t\tvar key;\n\t\tobject = object || {};\n\t\tdefs = defs || {};\n\t\t// Iterate over object non-prototype properties:\n\t\tfor (key in defs) {\n\t\t\tif (defs.hasOwnProperty(key)) {\n\t\t\t\t// Replace values with defaults only if undefined (allow empty/zero values):\n\t\t\t\tif (object[key] == null) object[key] = defs[key];\n\t\t\t}\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * Implementation of `Array.map()` for iteration loops\n\t *\n\t * Returns a new Array as a result of calling `iterator` on each array value.\n\t * Defers to native Array.map if available\n\t */\n\tfunction map(obj, iterator, context) {\n\t\tvar results = [], i, j;\n\n\t\tif (!obj) return results;\n\n\t\t// Use native .map method if it exists:\n\t\tif (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n\n\t\t// Fallback for native .map:\n\t\tfor (i = 0, j = obj.length; i < j; i++ ) {\n\t\t\tresults[i] = iterator.call(context, obj[i], i, obj);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Check and normalise the value of precision (must be positive integer)\n\t */\n\tfunction checkPrecision(val, base) {\n\t\tval = Math.round(Math.abs(val));\n\t\treturn isNaN(val)? base : val;\n\t}\n\n\n\t/**\n\t * Parses a format string or object and returns format obj for use in rendering\n\t *\n\t * `format` is either a string with the default (positive) format, or object\n\t * containing `pos` (required), `neg` and `zero` values (or a function returning\n\t * either a string or object)\n\t *\n\t * Either string or format.pos must contain \"%v\" (value) to be valid\n\t */\n\tfunction checkCurrencyFormat(format) {\n\t\tvar defaults = lib.settings.currency.format;\n\n\t\t// Allow function as format parameter (should return string or object):\n\t\tif ( typeof format === \"function\" ) format = format();\n\n\t\t// Format can be a string, in which case `value` (\"%v\") must be present:\n\t\tif ( isString( format ) && format.match(\"%v\") ) {\n\n\t\t\t// Create and return positive, negative and zero formats:\n\t\t\treturn {\n\t\t\t\tpos : format,\n\t\t\t\tneg : format.replace(\"-\", \"\").replace(\"%v\", \"-%v\"),\n\t\t\t\tzero : format\n\t\t\t};\n\n\t\t// If no format, or object is missing valid positive value, use defaults:\n\t\t} else if ( !format || !format.pos || !format.pos.match(\"%v\") ) {\n\n\t\t\t// If defaults is a string, casts it to an object for faster checking next time:\n\t\t\treturn ( !isString( defaults ) ) ? defaults : lib.settings.currency.format = {\n\t\t\t\tpos : defaults,\n\t\t\t\tneg : defaults.replace(\"%v\", \"-%v\"),\n\t\t\t\tzero : defaults\n\t\t\t};\n\n\t\t}\n\t\t// Otherwise, assume format was fine:\n\t\treturn format;\n\t}\n\n\n\t/* --- API Methods --- */\n\n\t/**\n\t * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value\n\t * Alias: `accounting.parse(string)`\n\t *\n\t * Decimal must be included in the regular expression to match floats (defaults to\n\t * accounting.settings.number.decimal), so if the number uses a non-standard decimal \n\t * separator, provide it as the second argument.\n\t *\n\t * Also matches bracketed negatives (eg. \"$ (1.99)\" => -1.99)\n\t *\n\t * Doesn't throw any errors (`NaN`s become 0) but this may change in future\n\t */\n\tvar unformat = lib.unformat = lib.parse = function(value, decimal) {\n\t\t// Recursively unformat arrays:\n\t\tif (isArray(value)) {\n\t\t\treturn map(value, function(val) {\n\t\t\t\treturn unformat(val, decimal);\n\t\t\t});\n\t\t}\n\n\t\t// Fails silently (need decent errors):\n\t\tvalue = value || 0;\n\n\t\t// Return the value as-is if it's already a number:\n\t\tif (typeof value === \"number\") return value;\n\n\t\t// Default decimal point comes from settings, but could be set to eg. \",\" in opts:\n\t\tdecimal = decimal || lib.settings.number.decimal;\n\n\t\t // Build regex to strip out everything except digits, decimal point and minus sign:\n\t\tvar regex = new RegExp(\"[^0-9-\" + decimal + \"]\", [\"g\"]),\n\t\t\tunformatted = parseFloat(\n\t\t\t\t(\"\" + value)\n\t\t\t\t.replace(/\\((.*)\\)/, \"-$1\") // replace bracketed values with negatives\n\t\t\t\t.replace(regex, '')         // strip out any cruft\n\t\t\t\t.replace(decimal, '.')      // make sure decimal point is standard\n\t\t\t);\n\n\t\t// This will fail silently which may cause trouble, let's wait and see:\n\t\treturn !isNaN(unformatted) ? unformatted : 0;\n\t};\n\n\n\t/**\n\t * Implementation of toFixed() that treats floats more like decimals\n\t *\n\t * Fixes binary rounding issues (eg. (0.615).toFixed(2) === \"0.61\") that present\n\t * problems for accounting- and finance-related software.\n\t */\n\tvar toFixed = lib.toFixed = function(value, precision) {\n\t\tprecision = checkPrecision(precision, lib.settings.number.precision);\n\t\tvar power = Math.pow(10, precision);\n\n\t\t// Multiply up by precision, round accurately, then divide and use native toFixed():\n\t\treturn (Math.round(lib.unformat(value) * power) / power).toFixed(precision);\n\t};\n\n\n\t/**\n\t * Format a number, with comma-separated thousands and custom precision/decimal places\n\t * Alias: `accounting.format()`\n\t *\n\t * Localise by overriding the precision and thousand / decimal separators\n\t * 2nd parameter `precision` can be an object matching `settings.number`\n\t */\n\tvar formatNumber = lib.formatNumber = lib.format = function(number, precision, thousand, decimal) {\n\t\t// Resursively format arrays:\n\t\tif (isArray(number)) {\n\t\t\treturn map(number, function(val) {\n\t\t\t\treturn formatNumber(val, precision, thousand, decimal);\n\t\t\t});\n\t\t}\n\n\t\t// Clean up number:\n\t\tnumber = unformat(number);\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(precision) ? precision : {\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal\n\t\t\t\t}),\n\t\t\t\tlib.settings.number\n\t\t\t),\n\n\t\t\t// Clean up precision\n\t\t\tusePrecision = checkPrecision(opts.precision),\n\n\t\t\t// Do some calc:\n\t\t\tnegative = number < 0 ? \"-\" : \"\",\n\t\t\tbase = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + \"\",\n\t\t\tmod = base.length > 3 ? base.length % 3 : 0;\n\n\t\t// Format the number:\n\t\treturn negative + (mod ? base.substr(0, mod) + opts.thousand : \"\") + base.substr(mod).replace(/(\\d{3})(?=\\d)/g, \"$1\" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split('.')[1] : \"\");\n\t};\n\n\n\t/**\n\t * Format a number into currency\n\t *\n\t * Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format)\n\t * defaults: (0, \"$\", 2, \",\", \".\", \"%s%v\")\n\t *\n\t * Localise by overriding the symbol, precision, thousand / decimal separators and format\n\t * Second param can be an object matching `settings.currency` which is the easiest way.\n\t *\n\t * To do: tidy up the parameters\n\t */\n\tvar formatMoney = lib.formatMoney = function(number, symbol, precision, thousand, decimal, format) {\n\t\t// Resursively format arrays:\n\t\tif (isArray(number)) {\n\t\t\treturn map(number, function(val){\n\t\t\t\treturn formatMoney(val, symbol, precision, thousand, decimal, format);\n\t\t\t});\n\t\t}\n\n\t\t// Clean up number:\n\t\tnumber = unformat(number);\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(symbol) ? symbol : {\n\t\t\t\t\tsymbol : symbol,\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal,\n\t\t\t\t\tformat : format\n\t\t\t\t}),\n\t\t\t\tlib.settings.currency\n\t\t\t),\n\n\t\t\t// Check format (returns object with pos, neg and zero):\n\t\t\tformats = checkCurrencyFormat(opts.format),\n\n\t\t\t// Choose which format to use for this value:\n\t\t\tuseFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;\n\n\t\t// Return with currency symbol added:\n\t\treturn useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\t};\n\n\n\t/**\n\t * Format a list of numbers into an accounting column, padding with whitespace\n\t * to line up currency symbols, thousand separators and decimals places\n\t *\n\t * List should be an array of numbers\n\t * Second parameter can be an object containing keys that match the params\n\t *\n\t * Returns array of accouting-formatted number strings of same length\n\t *\n\t * NB: `white-space:pre` CSS rule is required on the list container to prevent\n\t * browsers from collapsing the whitespace in the output strings.\n\t */\n\tlib.formatColumn = function(list, symbol, precision, thousand, decimal, format) {\n\t\tif (!list) return [];\n\n\t\t// Build options object from second param (if object) or all params, extending defaults:\n\t\tvar opts = defaults(\n\t\t\t\t(isObject(symbol) ? symbol : {\n\t\t\t\t\tsymbol : symbol,\n\t\t\t\t\tprecision : precision,\n\t\t\t\t\tthousand : thousand,\n\t\t\t\t\tdecimal : decimal,\n\t\t\t\t\tformat : format\n\t\t\t\t}),\n\t\t\t\tlib.settings.currency\n\t\t\t),\n\n\t\t\t// Check format (returns object with pos, neg and zero), only need pos for now:\n\t\t\tformats = checkCurrencyFormat(opts.format),\n\n\t\t\t// Whether to pad at start of string or after currency symbol:\n\t\t\tpadAfterSymbol = formats.pos.indexOf(\"%s\") < formats.pos.indexOf(\"%v\") ? true : false,\n\n\t\t\t// Store value for the length of the longest string in the column:\n\t\t\tmaxLength = 0,\n\n\t\t\t// Format the list according to options, store the length of the longest string:\n\t\t\tformatted = map(list, function(val, i) {\n\t\t\t\tif (isArray(val)) {\n\t\t\t\t\t// Recursively format columns if list is a multi-dimensional array:\n\t\t\t\t\treturn lib.formatColumn(val, opts);\n\t\t\t\t} else {\n\t\t\t\t\t// Clean up the value\n\t\t\t\t\tval = unformat(val);\n\n\t\t\t\t\t// Choose which format to use for this value (pos, neg or zero):\n\t\t\t\t\tvar useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero,\n\n\t\t\t\t\t\t// Format this value, push into formatted list and save the length:\n\t\t\t\t\t\tfVal = useFormat.replace('%s', opts.symbol).replace('%v', formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));\n\n\t\t\t\t\tif (fVal.length > maxLength) maxLength = fVal.length;\n\t\t\t\t\treturn fVal;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Pad each number in the list and send back the column of numbers:\n\t\treturn map(formatted, function(val, i) {\n\t\t\t// Only if this is a string (not a nested array, which would have already been padded):\n\t\t\tif (isString(val) && val.length < maxLength) {\n\t\t\t\t// Depending on symbol position, pad after symbol or at index 0:\n\t\t\t\treturn padAfterSymbol ? val.replace(opts.symbol, opts.symbol+(new Array(maxLength - val.length + 1).join(\" \"))) : (new Array(maxLength - val.length + 1).join(\" \")) + val;\n\t\t\t}\n\t\t\treturn val;\n\t\t});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export accounting for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `accounting` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = lib;\n\t\t}\n\t\texports.accounting = lib;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn lib;\n\t\t});\n\t} else {\n\t\t// Use accounting.noConflict to restore `accounting` back to its original value.\n\t\t// Returns a reference to the library's `accounting` object;\n\t\t// e.g. `var numbers = accounting.noConflict();`\n\t\tlib.noConflict = (function(oldAccounting) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `accounting` variable:\n\t\t\t\troot.accounting = oldAccounting;\n\t\t\t\t// Delete the noConflict method:\n\t\t\t\tlib.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn lib;\n\t\t\t};\n\t\t})(root.accounting);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['accounting'] = lib;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n","var map = require(\"./map\");\n\nvar getCountryCode = function(localeString) {\n    var components = localeString.split(\"_\");\n    if (components.length == 2) {\n        return components.pop();\n    }\n    components = localeString.split(\"-\");\n    if (components.length == 2) {\n        return components.pop();\n    }\n    return localeString;\n}\n\nexports.getCurrency = function(locale) {\n    var countryCode = getCountryCode(locale).toUpperCase();\n    if (countryCode in map) {\n        return map[countryCode];\n    }\n    return null;\n}\n\nexports.getLocales = function(currencyCode) {\n    currencyCode = currencyCode.toUpperCase();\n    var locales = [];\n    for (countryCode in map) {\n        if (map[countryCode] === currencyCode) {\n            locales.push(countryCode);\n        }\n    }\n    return locales;\n}","// Generated using ShowCurrencies.java\nvar map = {\nAD: 'EUR',\nAE: 'AED',\nAF: 'AFN',\nAG: 'XCD',\nAI: 'XCD',\nAL: 'ALL',\nAM: 'AMD',\nAN: 'ANG',\nAO: 'AOA',\nAR: 'ARS',\nAS: 'USD',\nAT: 'EUR',\nAU: 'AUD',\nAW: 'AWG',\nAX: 'EUR',\nAZ: 'AZN',\nBA: 'BAM',\nBB: 'BBD',\nBD: 'BDT',\nBE: 'EUR',\nBF: 'XOF',\nBG: 'BGN',\nBH: 'BHD',\nBI: 'BIF',\nBJ: 'XOF',\nBL: 'EUR',\nBM: 'BMD',\nBN: 'BND',\nBO: 'BOB',\nBQ: 'USD',\nBR: 'BRL',\nBS: 'BSD',\nBT: 'BTN',\nBV: 'NOK',\nBW: 'BWP',\nBY: 'BYR',\nBZ: 'BZD',\nCA: 'CAD',\nCC: 'AUD',\nCD: 'CDF',\nCF: 'XAF',\nCG: 'XAF',\nCH: 'CHF',\nCI: 'XOF',\nCK: 'NZD',\nCL: 'CLP',\nCM: 'XAF',\nCN: 'CNY',\nCO: 'COP',\nCR: 'CRC',\nCU: 'CUP',\nCV: 'CVE',\nCW: 'ANG',\nCX: 'AUD',\nCY: 'EUR',\nCZ: 'CZK',\nDE: 'EUR',\nDJ: 'DJF',\nDK: 'DKK',\nDM: 'XCD',\nDO: 'DOP',\nDZ: 'DZD',\nEC: 'USD',\nEE: 'EUR',\nEG: 'EGP',\nEH: 'MAD',\nER: 'ERN',\nES: 'EUR',\nET: 'ETB',\nFI: 'EUR',\nFJ: 'FJD',\nFK: 'FKP',\nFM: 'USD',\nFO: 'DKK',\nFR: 'EUR',\nGA: 'XAF',\nGB: 'GBP',\nGD: 'XCD',\nGE: 'GEL',\nGF: 'EUR',\nGG: 'GBP',\nGH: 'GHS',\nGI: 'GIP',\nGL: 'DKK',\nGM: 'GMD',\nGN: 'GNF',\nGP: 'EUR',\nGQ: 'XAF',\nGR: 'EUR',\nGS: 'GBP',\nGT: 'GTQ',\nGU: 'USD',\nGW: 'XOF',\nGY: 'GYD',\nHK: 'HKD',\nHM: 'AUD',\nHN: 'HNL',\nHR: 'HRK',\nHT: 'HTG',\nHU: 'HUF',\nID: 'IDR',\nIE: 'EUR',\nIL: 'ILS',\nIM: 'GBP',\nIN: 'INR',\nIO: 'USD',\nIQ: 'IQD',\nIR: 'IRR',\nIS: 'ISK',\nIT: 'EUR',\nJE: 'GBP',\nJM: 'JMD',\nJO: 'JOD',\nJP: 'JPY',\nKE: 'KES',\nKG: 'KGS',\nKH: 'KHR',\nKI: 'AUD',\nKM: 'KMF',\nKN: 'XCD',\nKP: 'KPW',\nKR: 'KRW',\nKW: 'KWD',\nKY: 'KYD',\nKZ: 'KZT',\nLA: 'LAK',\nLB: 'LBP',\nLC: 'XCD',\nLI: 'CHF',\nLK: 'LKR',\nLR: 'LRD',\nLS: 'LSL',\nLT: 'LTL',\nLU: 'EUR',\nLV: 'LVL',\nLY: 'LYD',\nMA: 'MAD',\nMC: 'EUR',\nMD: 'MDL',\nME: 'EUR',\nMF: 'EUR',\nMG: 'MGA',\nMH: 'USD',\nMK: 'MKD',\nML: 'XOF',\nMM: 'MMK',\nMN: 'MNT',\nMO: 'MOP',\nMP: 'USD',\nMQ: 'EUR',\nMR: 'MRO',\nMS: 'XCD',\nMT: 'EUR',\nMU: 'MUR',\nMV: 'MVR',\nMW: 'MWK',\nMX: 'MXN',\nMY: 'MYR',\nMZ: 'MZN',\nNA: 'NAD',\nNC: 'XPF',\nNE: 'XOF',\nNF: 'AUD',\nNG: 'NGN',\nNI: 'NIO',\nNL: 'EUR',\nNO: 'NOK',\nNP: 'NPR',\nNR: 'AUD',\nNU: 'NZD',\nNZ: 'NZD',\nOM: 'OMR',\nPA: 'PAB',\nPE: 'PEN',\nPF: 'XPF',\nPG: 'PGK',\nPH: 'PHP',\nPK: 'PKR',\nPL: 'PLN',\nPM: 'EUR',\nPN: 'NZD',\nPR: 'USD',\nPS: 'ILS',\nPT: 'EUR',\nPW: 'USD',\nPY: 'PYG',\nQA: 'QAR',\nRE: 'EUR',\nRO: 'RON',\nRS: 'RSD',\nRU: 'RUB',\nRW: 'RWF',\nSA: 'SAR',\nSB: 'SBD',\nSC: 'SCR',\nSD: 'SDG',\nSE: 'SEK',\nSG: 'SGD',\nSH: 'SHP',\nSI: 'EUR',\nSJ: 'NOK',\nSK: 'EUR',\nSL: 'SLL',\nSM: 'EUR',\nSN: 'XOF',\nSO: 'SOS',\nSR: 'SRD',\nST: 'STD',\nSV: 'SVC',\nSX: 'ANG',\nSY: 'SYP',\nSZ: 'SZL',\nTC: 'USD',\nTD: 'XAF',\nTF: 'EUR',\nTG: 'XOF',\nTH: 'THB',\nTJ: 'TJS',\nTK: 'NZD',\nTL: 'USD',\nTM: 'TMT',\nTN: 'TND',\nTO: 'TOP',\nTR: 'TRY',\nTT: 'TTD',\nTV: 'AUD',\nTW: 'TWD',\nTZ: 'TZS',\nUA: 'UAH',\nUG: 'UGX',\nUM: 'USD',\nUS: 'USD',\nUY: 'UYU',\nUZ: 'UZS',\nVA: 'EUR',\nVC: 'XCD',\nVE: 'VEF',\nVG: 'USD',\nVI: 'USD',\nVN: 'VND',\nVU: 'VUV',\nWF: 'XPF',\nWS: 'WST',\nYE: 'YER',\nYT: 'EUR',\nZA: 'ZAR',\nZM: 'ZMK',\nZW: 'ZWL'\n};\n\nmodule.exports = map;"],"names":["accounting","assign","localeCurrency","currencies","localeFormats","defaultCurrency","symbol","thousandsSeparator","decimalSeparator","symbolOnLeft","spaceBetweenAmountAndSymbol","decimalDigits","defaultLocaleFormat","formatMapping","format","pos","neg","zero","value","options","code","locale","getCurrency","localeMatch","exec","language","region","localeFormat","currency","findCurrency","filter","f","formatMoney","isUndefined","decimal","thousand","precision","indexOf","currencyCode","val","unformat","module","exports","Object","keys","map","key","getOwnPropertySymbols","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","toObject","undefined","TypeError","shouldUseNative","test1","String","getOwnPropertyNames","test2","i","fromCharCode","order2","n","join","test3","split","forEach","letter","err","target","source","from","symbols","to","s","arguments","length","call","lib","grouping","number","nativeMap","Array","nativeIsArray","isArray","toString","isString","obj","charCodeAt","substr","isObject","defaults","object","defs","iterator","context","j","results","checkPrecision","base","Math","round","abs","isNaN","checkCurrencyFormat","settings","match","replace","parse","regex","RegExp","unformatted","parseFloat","toFixed","power","pow","formatNumber","opts","usePrecision","negative","parseInt","mod","formats","useFormat","formatColumn","list","padAfterSymbol","maxLength","formatted","fVal","getCountryCode","localeString","components","pop","countryCode","toUpperCase","getLocales","locales","push","AD","AE","AF","AG","AI","AL","AM","AN","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"],"sourceRoot":""}